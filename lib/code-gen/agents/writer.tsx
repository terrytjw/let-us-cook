import { createStreamableUI, createStreamableValue } from "ai/rsc";
import { CoreMessage, ToolCallPart, ToolResultPart, streamText } from "ai";
import { openai } from "@ai-sdk/openai";
import { kbSearchSchema } from "@/validations/code-gen/search";
import { AI_MODELS } from "@/lib/constants";

import { Section } from "@/components/ai/code-gen/Section";
import { BotMessage } from "@/components/ai/code-gen/Message";
import { Icons } from "@/components/Icons";
import Spinner from "@/components/Spinner";

const CODE_SYS_INSTRUCTIONS = `As a professional Solidity developer, you are equipped to design and implement smart contracts.
    Aim to directly address the user's requirements, augmenting your response with insights from both your technical expertise and information gathered through the Blink knowledge base. YOUR OUTPUT SHOULD ONLY BE SOLIDITY CODE. ALWAYS search the Blink knowledge base for information to help you write the code.
    `;

export const writer = async (
  uiStream: ReturnType<typeof createStreamableUI>,
  codeStream: ReturnType<typeof createStreamableValue<string>>,
  messages: CoreMessage[],
) => {
  let fullResponse = "";
  let hasError = false;
  const answerSection = (
    <Section title="Code">
      <BotMessage content={codeStream.value} />
    </Section>
  );

  let isFirstToolResponse = true;
  const result = await streamText({
    model: openai(AI_MODELS.OPENAI.GPT_4),
    // maxTokens: 2500,
    system: CODE_SYS_INSTRUCTIONS,
    messages,
    tools: {
      knowledgeBaseRetrieval: {
        description: "Search the Blink knowledge base for information",
        parameters: kbSearchSchema,
        execute: async ({ query }: { query: string }) => {
          // If this is the first tool response, remove spinner
          if (isFirstToolResponse) {
            isFirstToolResponse = false;
            uiStream.update(null);
          }

          uiStream.update(
            <Spinner message="Searching Blink Knowledge Base..." />,
          );

          const res = await blinkSearch(query);

          uiStream.update(
            <div className="flex items-center gap-2">
              <Icons.search size={18} />
              Blink Knowledge Base search complete.
            </div>,
          );

          return res; // stub
        },
      },
    },
  });

  const toolCalls: ToolCallPart[] = [];
  const toolResponses: ToolResultPart[] = [];
  // `delta` represents a piece of new information generated by the AI model (a change from previous state), which in this case is text
  for await (const delta of result.fullStream) {
    switch (delta.type) {
      case "text-delta":
        if (delta.textDelta) {
          // If the first text delata is available, add a ui section
          if (fullResponse.length === 0 && delta.textDelta.length > 0) {
            // Update the UI
            uiStream.update(answerSection);
          }

          fullResponse += delta.textDelta;
          codeStream.update(fullResponse);
        }
        break;
      case "tool-call":
        toolCalls.push(delta);
        break;
      case "tool-result":
        // Append the answer section if the specific model is not used
        if (toolResponses.length === 0) {
          uiStream.append(answerSection);
        }
        toolResponses.push(delta);
        break;
      case "error":
        hasError = true;
        fullResponse += `\nError occurred while executing the tool`;
        break;
    }
  }
  messages.push({
    role: "assistant",
    content: [{ type: "text", text: fullResponse }, ...toolCalls],
  });

  if (toolResponses.length > 0) {
    // Add tool responses to the messages
    messages.push({ role: "tool", content: toolResponses });
  }

  return { result, fullResponse, hasError, toolResponses };
};

// function to simulate a search in the Blink knowledge base
async function blinkSearch(query: string) {
  // simulate a delay of 2 seconds to mimic an API call
  await new Promise((resolve) => setTimeout(resolve, 3000));

  return {
    tip: "Always use Solidity 0.8.0 and ensure the contract has a constructor.",
  };
}
